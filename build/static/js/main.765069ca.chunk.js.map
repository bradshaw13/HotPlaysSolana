{"version":3,"sources":["assets/youtube-logo.png","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","useEffect","addEventListener","account","fetch","className","src","width","height","frameBorder","allowFullScreen","title","onClick","type","placeholder","onChange","map","item","index","gifLink","alt","href","rel","youtubeLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.765069ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/youtube-logo.54fd1b63.png\";","import youtubeLogo from './assets/youtube-logo.png';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'; \n// Constants\nconst TWITTER_HANDLE = 'ShannonSharpe';\nconst TEST_GIFS = [\n  'https://media.giphy.com/media/l1J9wkNvsbyiMICBi/giphy.gif',\n  'https://media.giphy.com/media/l0HlTgeWIqq5wZMKA/giphy.gif',\n  'https://media.giphy.com/media/lrf5jEbnpVUek/giphy.gif',\n  'https://media.giphy.com/media/8Eup943BRqxbO/giphy.gif',\n  'https://media.giphy.com/media/NvLzDSmFEGY6c/giphy.gif',\n  'https://media.giphy.com/media/bHziZDDGEwdugOH7b5/giphy.gif'\n]\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst YOUTUBE_LINK = 'https://www.youtube.com/watch?v=3SHCHkYbQWU';\n\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst network = clusterApiUrl('devnet');\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana){\n        if(solana.isPhantom){\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true});\n          console.log('Connected with Public Key:', response.publicKey.toString());\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      }\n      else {\n        alert('Solana object not found! get a Phantom Wallet 👻');\n      }\n    }catch (error){\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana){\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if(inputValue.length === 0){\n      console.log(\"No gif link given!\")\n      return\n    }\n    console.log('Gif link:', inputValue)\n    try{\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const onInputChange=(event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try{\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button \n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    else {\n      return (\n      <div className=\"connected-container\">\n        <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue} onChange={onInputChange}/>\n        <button className=\"cta-button submit-gif-button\" onClick={sendGif}>Submit</button>\n        <div className=\"gif-grid\">\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt={item.gifLink}/>\n            </div>\n          ))}\n        </div>\n      </div>)\n    }\n}\n\n\n\n  useEffect(() => {\n    window.addEventListener('load', async(event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error)\n      setGifList(null)\n    }\n  }\n\n  useEffect(() => {\n    if(walletAddress){\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n        <iframe src=\"https://giphy.com/embed/WR9j3mH5yVVO89DkY7\" width=\"480\" height=\"270\" frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen title='unique'></iframe>\n\n          <p className=\"header\">⛩️ Fire Portal</p>\n          <p className=\"sub-text\">\n            View your Hot Plays in the metaverse 🔥\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <a href={YOUTUBE_LINK} target=\"_blank\" rel=\"noreferrer\"><img alt=\" Shannon speaking the truth\" className=\"twitter-logo\" src={youtubeLogo} /></a>\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Shoutout to the king of hot takes @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}